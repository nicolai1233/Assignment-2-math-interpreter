/*
 * generated by Xtext 2.24.0
 */
package org.xtext.example.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import java.util.Random
import org.xtext.example.mathExample2.TextExp
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.xmi.impl.XMLResourceImpl
import org.eclipse.emf.ecore.util.EcoreUtil
import org.xtext.example.mathExample2.Parenthesis
import org.xtext.example.mathExample2.MathExp
import org.xtext.example.mathExample2.Numbers
import org.xtext.example.mathExample2.Plus
import org.xtext.example.mathExample2.Minus
import org.xtext.example.mathExample2.Mult
import org.xtext.example.mathExample2.Div

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MathExample2Generator extends AbstractGenerator {


	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val tg = resource.allContents.filter(MathExp).next
		System::out.println("Model:")
		tg.display
		System::out.println("Generates: "+tg.generate)
	}
	
	def static int compute(MathExp gen) {
		(new MathExample2Generator).generate(gen)
	}
	
	def int generate(MathExp gen) {
		gen.exp.generateExp
	}
		
	def dispatch int generateExp(TextExp exp) { exp.exp1.generateExp }
	def dispatch int generateExp(Numbers exp) { exp.value }
	
	def dispatch int generateExp(Plus exp) { 
		exp.exp1.generateExp+exp.exp2.generateExp
	}
	def dispatch int generateExp(Minus exp) {
		exp.exp1.generateExp-exp.exp2.generateExp
	}
	
	def dispatch int generateExp(Mult exp) { 
		exp.exp1.generateExp*exp.exp2.generateExp
	}
	def dispatch int generateExp(Div exp) { 
		exp.exp1.generateExp/exp.exp2.generateExp
	}
	
	def dispatch int generateExp(Parenthesis exp) { exp.exp.generateExp }
	
	def display(EObject model) {
  		val res = new XMLResourceImpl
  		res.contents.add(EcoreUtil::copy(model))
  		System::out.println("Dump of model:")
  		res.save(System.out, null);
	}
		
}
